from typing import List

#Функция для обхода в глубину (DFS)
def dfs(n, m, i, j):
    dir = [(0, 1), (0, -1), (1, 0), (-1, 0)]                    #определяем возможные направления движения (вправо, влево, вниз, вверх)
    
    grid[i][j] = '0'                                            #помечаем текущую ячейку как посещенную, заменяя '1' на '0'
    #Проходим по всем возможным направлениям
    for dx, dy in dir:
        x = i + dx
        y = j + dy
        #Проверяем, что новая позиция находится в пределах сетки и является частью острова
        if 0 <= x < n and 0 <= y < m and grid[x][y] == '1':
            dfs(n, m, x, y)                                     #рекурсивно вызываем dfs для новой позиции

def numIslands(grid: List[List[str]]) -> int:
    #Получаем размеры сетки
    n = len(grid)                                               #количество строк
    m = len(grid[0])                                            #количество столбцов

    out = 0                                                     #количества островов

    #Проходим по всем ячейкам сетки
    for i in range(n):
        for j in range(m):
            if grid[i][j] == '1':                               #если находим ячейку с '1', это начало нового острова
                out += 1                                        #увеличиваем счетчик островов
                dfs(n, m, i, j)                                 #запускаем обход в глубину для пометки всех ячеек этого острова

    return out

grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]

print(numIslands(grid))